/*
 * Copyright (c) 2025 Intrepid Control Systems, Inc.
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 */

#ifndef ICS_MKA_RESULT_H
#define ICS_MKA_RESULT_H

#ifdef __cplusplus
extern "C" {
#endif

typedef enum mka_result {
	MKA_SUCCESS = 0,
	MKA_ERROR = 1,
	MKA_ICK_GENERATION_ERROR = 2,
	MKA_KEK_GENERATION_ERROR = 3,
	MKA_DECODE_INSUFFICIENT_LENGTH1 = 4,
	MKA_DECODE_INSUFFICIENT_LENGTH2 = 5,
	MKA_DECODE_INSUFFICIENT_LENGTH3 = 6,
	MKA_DECODE_INSUFFICIENT_LENGTH4 = 7,
	MKA_DECODE_INVALID_ALIGN1 = 8,
	MKA_DECODE_INVALID_CAK = 9,
	MKA_ENCODE_INSUFFICIENT_LENGTH1 = 10,
	MKA_ENCODE_INSUFFICIENT_LENGTH2 = 11,
	MKA_ENCODE_INSUFFICIENT_LENGTH3 = 12,
	MKA_ENCODE_INSUFFICIENT_LENGTH4 = 13,
	MKA_ENCODE_INSUFFICIENT_LENGTH5 = 14,
	MKA_ENCODE_LENGTH_LIMIT_EXCEEDED1 = 15,
	MKA_EXPECTED_BASIC_PARAMS1 = 16,
	MKA_UNKNOWN_CAK = 17,
	MKA_ICV_GENERATION_ERROR = 18,
	MKA_INTEGRITY_CHECK_FAIL = 19,
	MKA_MISSING_ICV = 20,
	MKA_ERROR_PEER_LIST_FULL = 21,
	MKA_ERROR_AES_KEY_UNWRAP_SAK = 22,
	MKA_ENCODE_INSUFFICIENT_LENGTH6 = 23,
	MKA_DECODE_INSUFFICIENT_LENGTH5 = 24,
	MKA_DECODE_INVALID_CIPHER_SUITE1 = 25,
	MKA_DECODE_INVALID_CIPHER_SUITE2 = 26,
	MKA_DECODE_INSUFFICIENT_LENGTH6 = 27,
	MKA_DECODE_INVALID_CIPHER_SUITE3 = 28,
	MKA_XPN_NOT_FOUND = 29,
	MKA_DECODE_PARAMS_SIZE_INSUFFICIENT_LENGTH1 = 30,
	MKA_DECODE_PARAMS_SIZE_INSUFFICIENT_LENGTH2 = 31,
	MKA_DECODE_PARAMS_SIZE_INSUFFICIENT_LENGTH3 = 32,
	MKA_ERROR_AES_KEY_UNWRAP_CAK = 33,
	MKA_ERROR_OLD_FRAME = 34,
	MKA_ERROR_AES_KEY_WRAP_SAK = 35,
	MKA_INVALID_CAK_LENGTH = 36,
	MKA_INVALID_CKN_LENGTH = 37,
	MKA_INVALID_ARG = 38,
	MKA_CAK_LIST_CAPACITY_REACHED = 39,
	MKA_NO_CAK = 40,
	MKA_UNSUPPORTED_VERSION_RECEIVED = 41,
	MKA_INVALID_MACSEC_LENGTH = 42,
	MKA_FAILED_TO_INIT_SA = 43,
	MKA_ENCODE_INSUFFICIENT_LENGTH7 = 44,
} mka_result_t;

int ics_mka_result_get_level(mka_result_t type);
const char* ics_mka_result_get_message(mka_result_t type);

#ifdef __cplusplus
}
#endif
#endif
